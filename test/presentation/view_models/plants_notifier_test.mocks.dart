// Mocks generated by Mockito 5.4.4 from annotations
// in leafy_house/test/presentation/view_models/plants_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i11;

import 'package:leafy_house/data/datasources/image_service.dart' as _i3;
import 'package:leafy_house/domain/entities/plant.dart' as _i6;
import 'package:leafy_house/domain/interfaces/plant_repository.dart' as _i2;
import 'package:leafy_house/domain/usecases/add_plant.dart' as _i7;
import 'package:leafy_house/domain/usecases/add_plant.dart' as _i10;
import 'package:leafy_house/domain/usecases/delete_plant.dart' as _i8;
import 'package:leafy_house/domain/usecases/fetch_plants.dart' as _i4;
import 'package:leafy_house/domain/usecases/update_plant.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePlantRepository_0 extends _i1.SmartFake
    implements _i2.PlantRepository {
  _FakePlantRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImageService_1 extends _i1.SmartFake implements _i3.ImageService {
  _FakeImageService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FetchPlants].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchPlants extends _i1.Mock implements _i4.FetchPlants {
  MockFetchPlants() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PlantRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePlantRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PlantRepository);

  @override
  _i5.Future<List<_i6.Plant>> call(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [userId],
        ),
        returnValue: _i5.Future<List<_i6.Plant>>.value(<_i6.Plant>[]),
      ) as _i5.Future<List<_i6.Plant>>);
}


/// A class which mocks [DeletePlant].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeletePlant extends _i1.Mock implements _i8.DeletePlant {
  MockDeletePlant() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PlantRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePlantRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PlantRepository);

  @override
  _i5.Future<void> call(String? plantId) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [plantId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [UpdatePlant].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdatePlant extends _i1.Mock implements _i9.UpdatePlant {
  MockUpdatePlant() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PlantRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePlantRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PlantRepository);

  @override
  _i5.Future<void> call(_i6.Plant? plant) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [plant],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [AddPlant].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddPlant extends _i1.Mock implements _i10.AddPlant {
  MockAddPlant() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PlantRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePlantRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PlantRepository);

  @override
  _i3.ImageService get imageService => (super.noSuchMethod(
        Invocation.getter(#imageService),
        returnValue: _FakeImageService_1(
          this,
          Invocation.getter(#imageService),
        ),
      ) as _i3.ImageService);

  @override
  _i5.Future<void> call(
    _i6.Plant? plant,
    _i11.File? imageFile,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            plant,
            imageFile,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
